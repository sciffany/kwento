// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
    words         Word[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Blog {
    id           String  @id @default(cuid())
    title        String
    englishTitle String
    languageCode String
    imageUrl     String?

    userId    String?
    user      User?      @relation(fields: [userId], references: [id])
    blogCards BlogCard[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BlogCard {
    id             String       @id @default(cuid())
    content        String
    englishContent String
    image          String?
    blogCardType   BlogCardType
    explanation    String?
    voiceUrl       String?

    blogId String?
    blog   Blog?   @relation(fields: [blogId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum BlogCardType {
    TEXT
    IMAGE
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Word {
    id             String @id @default(cuid())
    content        String
    englishContent String

    userId String?
    user   User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
